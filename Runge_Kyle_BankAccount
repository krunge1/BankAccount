insufFee = 5

class BankAccount:
    global insufFee
    def __init__(self, name, int_rate, balance):
        self.name = name
        self.int_rate = int_rate
        self.balance = balance

    def deposit (self, amount):
        if amount > 0:
            self.balance += amount
        else: 
            self.balance = 0
        return self

    def withdraw(self, amount):
        if BankAccount.can_withdraw (self.balance, amount):
            # take balance less amount less 5
            self.balance -= amount
            print(f"{self.name}: New balance is ${self.balance}")
            return self
        else:
            self.balance -= insufFee
            print(f"{self.name}: Insufficent funds in account balance. An insufficient funds fee will be charged for ${insufFee}. Account balance after ${insufFee} is ${self.balance}")
        return self
    
    @staticmethod
    def can_withdraw (balance, amount):
        if (balance - amount) < 0:
            return False
        else:
            return True
    
    def display_account_info(self):
        print(f"{self.name}: Your account balance currently is ${self.balance}")
        return self 

    def yield_interest(self):
        if self.balance > 0:
            previousBalance = self.balance
            self.balance = self.balance * (1 + self.int_rate)
            print(f"{self.name}: You have earned ${self.balance - previousBalance} in interest this period. Your new balance is ${self.balance}")
        return self
    


kyle = BankAccount('Kyle',.07, 0)
moneyBags = BankAccount('`Senior Money Bags',.25, 1000000)
# print (kyle.balance)
# kyle.deposit(50)
# print(kyle.balance)
# kyle.withdraw(55)
# kyle.withdraw(25)
# kyle.display_account_info()
# kyle.yield_interest()

kyle.deposit(500).deposit(251).deposit(1000).withdraw(1500).yield_interest().display_account_info()
moneyBags.deposit(500000).deposit(250001).withdraw(750000).withdraw(450000).withdraw(450000).withdraw(500000)